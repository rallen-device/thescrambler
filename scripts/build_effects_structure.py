import csv
import shutil

print ("Re-building the effects structure autogen header")

lines0 = """//
//  TextChatStructure_AUTOGEN.h
//  TheScrambler
//
//  Auto-generated by build_effects_structure.py, DO NOT EDIT
//  Copyright Â© 2021 Swn. All rights reserved.
//

#ifndef TextChatStructure_AUTOGEN_H
#define TextChatStructure_AUTOGEN_H

#include <string>
#include <inttypes.h>
#include "../PluginProcessor.h"

enum E_TEXT_COMMAND_TYPE
{
    CMD_SEL,
    CMD_DIGIT,
    CMD_NULL,
    CMD_NOT_CMD,
    N_CMDS
};

struct S_TEXT_CHAT {
    std::string name;
    std::string desc;
    std::string command;
    std::string arguments;
    E_TEXT_COMMAND_TYPE type;   // type of command from E_TEXT_COMMAND_TYPE
    std::string max;                    // max input
    std::string min;                    // min input
    std::string file;                    // min input
    std::string func;                    // min input
};

#define NULL_STRING ""
"""


lines2 = """};


#endif /* TextChatStructure_AUTOGEN_h */
"""

headers = []
lines = []

with open ("pluginstructure.csv") as f:
    reader = csv.reader(f)
    data = list(reader)
    headers = data.pop(0)
    for row in data:
        d = dict()
        for index, cell in enumerate(row):
            d[headers[index]] = '"' + cell + '"'
            if (d[headers[index]] == '""'):
                d[headers[index]] = "NULL_STRING"
            if headers[index] == "Type":
                if cell == "Number":
                    d[headers[index]] = "CMD_DIGIT";
                elif cell == "Null":
                    d[headers[index]] = "CMD_NULL";
                elif cell == "Select":
                    d[headers[index]] = "CMD_SEL";
                else:
                    d[headers[index]] = "CMD_NOT_CMD";
                
        lines.append(d)

lengths = dict()
for line in lines:
    for h in headers:
        if h not in lengths:
            lengths[h] = len(line[h])
        else:
            if len(line[h]) > lengths[h]:
                lengths[h] = len(line[h])

midlines = []

l = "// "
for header in headers:
    l += header
    for _ in range (0, lengths[header] - len(header) + 2):
        l += " "
l += "\n"
midlines.append(l)

for line in lines:
    l = "{"
    for header in headers:
        l += line[header] + ","
        for _ in range (0, lengths[header] - len(line[header]) + 1):
            l += " "
    l += "},\n"
    midlines.append (l)
    
    

lines1 = "#define CHAT_STRUCT_LEN {}\nconst S_TEXT_CHAT chatstruct [CHAT_STRUCT_LEN] =\n\n{{\n".format(len(lines))
    
final_lines = []
final_lines.append (lines0)
final_lines.append (lines1)
for mid in midlines:
    final_lines.append (mid)
final_lines.append (lines2)

with open ("TextChatStructure_AUTOGEN.h", "w") as f:
    f.writelines(final_lines)
        
print ("Done building the effects structure autogen header")

shutil.copyfile("TextChatStructure_AUTOGEN.h", "/Users/richardallen/Documents/Projects/FamilySircle/familysircle/Source/textchat/TextChatStructure_AUTOGEN.h")
    

